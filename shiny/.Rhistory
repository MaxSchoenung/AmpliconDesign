NULL
}else{
left <- left.splitted[,2]
left.id <- left.splitted[,1]
right.splitted <- stringr::str_split_fixed(x[grep("RIGHT",x)],"=",2)
right <- right.splitted[,2]
right.id <- right.splitted[,1]
primer_left_seq <- left[grep("SEQUENCE",left.id)]
primer_right_seq <- right[grep("SEQUENCE",right.id)]
primer_left_num <- left[grep("SEQUENCE",left.id)+1]
prim_left_NumSplit <- stringr::str_split_fixed(primer_left_num,",",2)
primer_right_num <- right[grep("SEQUENCE",right.id)+1]
prim_right_NumSplit <- stringr::str_split_fixed(primer_right_num,",",2)
prim_right_len <- as.numeric(prim_right_NumSplit[,2])
prim_left_len <- as.numeric( prim_left_NumSplit[,2])
if(strand=="+"){
prim_right_end <- as.numeric(prim_right_NumSplit[,1])
prim_left_start <- as.numeric(prim_left_NumSplit[,1])
}else if(strand=="-"){
prim_right_end <- as.numeric(range@ranges@width)-as.numeric(prim_right_NumSplit[,1])+as.numeric(prim_right_NumSplit[,2])-2
prim_left_start <- as.numeric(range@ranges@width)-as.numeric(prim_left_NumSplit[,1])-as.numeric(prim_left_NumSplit[,2])
}
primer_right_gc <- as.numeric(right[grep("GC",right.id)])
primer_left_gc <- as.numeric(left[grep("GC",left.id)])
primer_right_tm <- as.numeric(right[grep("TM",right.id)])
primer_left_tm <- as.numeric(left[grep("TM",left.id)])
size <- stringr::str_split_fixed(x[grep("SIZE",x)],"=",2)[,2]
prim_left <- GenomicRanges::GRanges(paste0(range@seqnames,":",c(IRanges::start(range)+prim_left_start),"-",c(IRanges::start(range)+prim_left_start+as.numeric(prim_left_len))))
prim_right <- GenomicRanges::GRanges(paste0(range@seqnames,":",c(IRanges::start(range)+prim_right_end-as.numeric(prim_right_len)),"-",c(IRanges::start(range)+prim_right_end)))
if(strand=="+"){
amplicon <- GenomicRanges::GRanges(paste0(range@seqnames,":",IRanges::start(prim_left),"-",IRanges::end(prim_right)))
}else{
amplicon <- GenomicRanges::GRanges(paste0(range@seqnames,":",IRanges::start(prim_right),"-",IRanges::end(prim_left)))
}
seqstring <- stringr::str_split_fixed(x[grep("SEQUENCE",x)[2]],"=",2)[,2]
strings <- stringr::str_sub(seqstring,prim_left_NumSplit[,1],prim_right_NumSplit[,1])
cgs <- stringr::str_count(strings,"tG")
mat <- data.frame("Primer ID"=rep(id,length(primer_left_seq)),"Strand"=rep(strand,length(primer_left_seq)),
"Primer sequences left"=primer_left_seq,"Primer sequences right"=primer_right_seq,
"Primer left begin"=prim_left_start,"Primer left length"=prim_left_len,"Primer right end"=prim_right_end,
"Primer right length"=prim_right_len,"GC percent left"=primer_left_gc,"GC percent right"=primer_right_gc,
"Melting temp left"=primer_left_tm,"Melting temp right"=primer_right_tm,"Amplicon size"=size,
"Region"=as.character(range),"UCSC Primer Left"=as.character(prim_left),"UCSC Primer Right"=as.character(prim_right),"Amplicon"=as.character(amplicon),"#CpGs"=cgs)
}
}
cutTable <- function(d,handles_f,handles_r,in.genome){
a <- read.table(output,stringsAsFactors = F)
ind <- which(a[,1]=="=")
int <- findInterval(1:nrow(a),ind)
listed <- split(a,int)
## shape the elements
listed <- listed[-length(listed)] #last row is just a comma
listed[[1]] <- listed[[1]][-c(1:9),]
listed[2:length(listed)] <- lapply(listed[2:length(listed)],function(x)x[-1,])
startt <- Sys.time()
listed.results <- parallel::mclapply(listed,shape_fun)
null.list <- lapply(listed.results,is.null)
null.list <- do.call(c,null.list)
listed.results2 <- listed.results[which(!null.list)]
for(i in 1:length(listed.results2)){
listed.results2[[i]] <- cbind("AmpliconID"=rep(c(as.numeric(names(listed.results2))+1)[i],nrow(listed.results2[[i]])),listed.results2[[i]])
}
df <- do.call(rbind,listed.results2)
colnames(df) <- c("Amplicon","Primer ID","Strand","Primer sequences left","Primer sequences right","Primer left begin","Primer left length","Primer right end","Primer right length","GC percent left","GC percent right","Melting temp left","Melting temp right","Amplicon size","Region","UCSC Primer Left","UCSC Primer Right","Amplicon","#CpGs")
head(df)
endt <- Sys.time()
message(paste0("Execution time: ",endt-startt))
df[,4] <- paste0(tolower(handles_f),df[,4])
df[,5] <- paste0(tolower(handles_r),df[,5])
return(df)
message(paste0(Sys.time()," CutTable Done!"))
}
output <- read.table("~/Desktop/out35c618136095",stringsAsFactors = F)
1:nrow(df)
rownames(df) <- 1:nrow(df)
df
shiny::runApp('~/Documents/AG_Lipka/Projects/AmpliconDesign/AmpDesignLite/shiny')
library(magrittr)
library(shinythemes)
library(shinycssloaders)
library(shinydashboard)
library(shinybusy)
library(shiny)
library(shinyBS)
library(shinyjs)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load_amp <- function(files,meta,files_orig){
meta <- read.delim(meta,row.names = 1)
#order.df <- do.call(rbind,stringr::str_split(files,"/"))
#order.df[,ncol(order.df)]
BiSeq::readBismark(files[match(rownames(meta),files_orig)],colData=meta)
}
#' qc_plots
#'
#' @param set
#'
#' @return
#' @export
#' @import BiSeq
#'
#' @examples
qc_plots <- function(set){
id <- as.character(set@colData$UPN)
id <- factor(id, levels = id)
#### total reads
total.reads <- BiSeq::totalReads(set)
total.reads <- data.frame("Sample"=id,"Sites"=colSums(total.reads))
p1 <- ggplot(total.reads,aes(Sample,log10(Sites)))+
geom_bar(stat="identity")+
theme_minimal()+
ylab("log10(Total Reads per Sample)")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#### Detected CpGs
cg.cov <- BiSeq::covStatistics(set)
cg.cov <- data.frame("Sample"=id,"CpG"=cg.cov$Covered_CpG_sites)
p2 <- ggplot(cg.cov,aes(Sample,CpG))+
geom_bar(stat="identity")+
theme_minimal()+
ylab("Covered CpG sites")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#### Numer of reads per sample versus detected CpG sites
reads_cg <- cbind(total.reads,"CpG"=cg.cov$CpG)
p3 <- ggplot(reads_cg,aes(log10(Sites),CpG))+
geom_point()+
theme_minimal()+
geom_smooth(method="lm")+
ylab("Covered CpG Sites")+
xlab("log10(Reads)")
#### Coverage per CpG
cov_cg <- BiSeq::totalReads(set)
colnames(cov_cg) <- as.character(id)
cov_cg.melt <- reshape2::melt(cov_cg)
cov_cg.melt <- cov_cg.melt[cov_cg.melt$value>0,]
p4 <- ggplot(cov_cg.melt,aes(Var2,log10(value)))+
geom_boxplot()+
theme_minimal()+
xlab("Sample")+
ylab("log10(Coverage per CpG)")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
return(list(p1,p2,p3,p4))
}
#' clustering
#'
#' @param set
#' @param by
#'
#' @return
#' @export
#'
#' @examples
clustering <- function(set,by){
# get beta matrix
meth.clean.rel <- BiSeq::rawToRel(set)
meth.cluster <- na.omit(SummarizedExperiment::assay(meth.clean.rel))
#calculate pca
pca <- prcomp(t(meth.cluster))
variance <- (pca$sdev)^2 /sum(pca$sdev^2)
p1 <- ggplot(as.data.frame(pca$x),aes(PC1,PC2))+
geom_point()+
theme_bw()+
xlab(paste0("PC1 (",round(variance[1]*100,2),"% of Variance)"))+
ylab(paste0("PC2 (",round(variance[2]*100,2),"% of Variance)"))+
theme(legend.title = element_blank())
if(by=="zero"){
print(p1)
}else{
print(p1+geom_point(aes(color=set@colData[,by])))
}
}
#' amp_heatmap
#'
#' @param set
#' @param col_heatmap
#' @param ...
#'
#' @return
#' @export
#'
#' @examples
amp_heatmap <- function(set,col_heatmap,...){
meth.clean.rel <- BiSeq::rawToRel(set)
ids <- as.data.frame(SummarizedExperiment::rowRanges(set))
meth.cluster <- SummarizedExperiment::assay(meth.clean.rel)
rownames(meth.cluster) <- paste0(ids$seqnames,":",ids$start)
meth.cluster <- na.omit(meth.cluster)
pheatmap::pheatmap(meth.cluster,
clustering_distance_cols = "manhattan",
clustering_distance_rows = "manhattan",
clustering_method = "ward.D2",
annotation_col = as.data.frame(set@colData[col_heatmap]),...)
}
region_heatmap <- function(set,bed_ranges,co=T,co_num){
set1 <- IRanges::subsetByOverlaps(set,GenomicRanges::GRanges(bed_ranges))
if(co==T){
set1 <- BiSeq::filterByCov(set1,as.numeric(co_num),global=FALSE)
}
meth.set1 <- BiSeq::rawToRel(set1)
meth.set1 <- SummarizedExperiment::assay(meth.set1)
ids <- as.data.frame(SummarizedExperiment::rowRanges(set1))
rownames(meth.set1) <- paste0(ids$seqnames,":",ids$start)
pheatmap::pheatmap(meth.set1,cluster_rows = F,cluster_cols = F)
}
isUCSCstlye <- function(x){
chr.ind <- stringr::str_split_fixed(x,":",2)[,1]
num.ind <- stringr::str_split_fixed(x,":",2)[,2]
num.start <- as.numeric(stringr::str_split_fixed(num.ind,"-",2)[,1])
num.end <- as.numeric(stringr::str_split_fixed(num.ind,"-",2)[,2])
ret <- TRUE
if(sum(chr.ind%in%paste0("chr",c(1:22,"X","y")))!=length(chr.ind)){
ret <- FALSE
}
if(sum(is.na(num.end))>0|sum(is.na(num.start))>0){
ret <- FALSE
}else if(sum(num.start>num.end)>0){
ret <- FALSE
}
return(ret)
}
a <- load_amp("~/Documents/AG_Lipka/People/Sina/2020-08_ampBS/cov_files/",meta = "~/Documents/AG_Lipka/People/Sina/2020-08_ampBS/sample_sheet.txt")
a <- load_amp("~/Documents/AG_Lipka/People/Sina/2020-08_ampBS/cov_files/",meta = "~/Documents/AG_Lipka/People/Sina/2020-08_ampBS/sample_sheet.txt",files_orig = "~/Documents/AG_Lipka/People/Sina/2020-08_ampBS/cov_files/")
a <- load_amp("~/Documents/AG_Lipka/People/Sina/2020-08_ampBS/cov_files/",meta = "~/Documents/AG_Lipka/People/Sina/2020-08_ampBS/sample_sheet.txt",files_orig = list.files("~/Documents/AG_Lipka/People/Sina/2020-08_ampBS/cov_files/"))
list.files("~/Documents/AG_Lipka/People/Sina/2020-08_ampBS/cov_files/")
BiSeq::readBismark
?BiSeq::readBismark
a <- read.delim("~/Documents/AG_Lipka/People/Sina/2020-08_ampBS/sample_sheet.txt",stringsAsFactors = F)
a
list.files("~/Documents/AG_Lipka/People/Sina/2020-08_ampBS/cov_files/")
list.files("~/Documents/AG_Lipka/People/Sina/2020-08_ampBS/cov_files/")==a$ID
c <- BiSeq::readBismark(paste0("~/Documents/AG_Lipka/People/Sina/2020-08_ampBS/cov_files/",c),a)
b <- list.files("~/Documents/AG_Lipka/People/Sina/2020-08_ampBS/cov_files/")==a$ID
c <- BiSeq::readBismark(paste0("~/Documents/AG_Lipka/People/Sina/2020-08_ampBS/cov_files/",b),a)
b <- list.files("~/Documents/AG_Lipka/People/Sina/2020-08_ampBS/cov_files/")
c <- BiSeq::readBismark(paste0("~/Documents/AG_Lipka/People/Sina/2020-08_ampBS/cov_files/",b),a)
c
qc_plots(c)
library(ggplot2)
qc_plots(c)
clustering(c,"UPN")
meth.clean.rel <- BiSeq::rawToRel(c)
meth.cluster <- na.omit(SummarizedExperiment::assay(meth.clean.rel))
meth.cluster
meth.clean.rel
a <- read.delim("~/Documents/AG_Lipka/People/Sina/2020-08_ampBS/clean/sample_sheet.txt",stringsAsFactors = F)
b <- list.files("~/Documents/AG_Lipka/People/Sina/2020-08_ampBS/clean/")
c <- BiSeq::readBismark(paste0("~/Documents/AG_Lipka/People/Sina/2020-08_ampBS/cov_files/",b),a)
c <- BiSeq::readBismark(paste0("~/Documents/AG_Lipka/People/Sina/2020-08_ampBS/clean/",b),a)
a <- read.delim("~/Documents/AG_Lipka/People/Sina/2020-08_ampBS/clean/sample_sheet.txt",stringsAsFactors = F)
b <- list.files("~/Documents/AG_Lipka/People/Sina/2020-08_ampBS/clean/")
c <- BiSeq::readBismark(paste0("~/Documents/AG_Lipka/People/Sina/2020-08_ampBS/clean/",b),a)
b
b <- list.files("~/Documents/AG_Lipka/People/Sina/2020-08_ampBS/clean/")[1:31]
c <- BiSeq::readBismark(paste0("~/Documents/AG_Lipka/People/Sina/2020-08_ampBS/clean/",b),a)
c
qc_plots(c)
clustering(c,"UPN")
meth.clean.rel <- BiSeq::rawToRel(c)
meth.clean.rel
d <- SummarizedExperiment::assay(meth.clean.rel)
d
View(d)
nchar("ggataacttcgtatagcatacattatacgaagttatcgcgccctaccgggtaggggaggcgcttttcccaaggcagtctggagcatgcgctttagcagccccgctgggcacttggcgctacacaagtggcctctggcctcgcacacattccacatccaccggtaggcgccaaccggctccgttctttggtggccccttcgcgccaccttctactcctcccctagtcaggaagttcccccccgccccgcagctcgcgtcgtgcaggacgtgacaaatggaagtagcacgtctcactagtctcgtgcagatggacagcaccgctgagcaatggaagcgggtaggcctttggggcagcggccaatagcagctttgctccttcgctttctgggctcagaggctgggaaggggtgggtccgggggcgggctcaggggcgggctcaggggcggggcgggcgcccgaaggtcctccggaggcccggcattctgcacgcttcaaaagcgcacgtctgccgcgctgttctcctcttcctcatctccgggcctttcggcctgcagccaatatgggatcggccattgaacaagatggattgcacgcaggttctccggccgcttgggtggagaggctattcggctatgactgggcacaacagacaatcggctgctctgatgccgccgtgttccggctgtcagcgcaggggcgcccggttctttttgtcaagaccgacctgtccggtgccctgaatgaactgcaggacgaggcagcgcggctatcgtggctggccacgacgggcgttccttgcgcagctgtgctcgacgttgtcactgaagcgggaagggactggctgctattgggcgaagtgccggggcaggatctcctgtcatctcaccttgctcctgccgagaaagtatccatcatggctgatgcaatgcggcggctgcatacgcttgatccggctacctgcccattcgaccaccaagcgaaacatcgcatcgagcgagcacgtactcggatggaagccggtcttgtcgatcaggatgatctggacgaagagcatcaggggctcgcgccagccgaactgttcgccaggctcaaggcgcgcatgcccgacggcgaggatctcgtcgtgacccatggcgatgcctgcttgccgaatatcatggtggaaaatggccgcttttctggattcatcgactgtggccggctgggtgtggcggatcgctatcaggacatagcgttggctacccgtgatattgctgaagagcttggcggcgaatgggctgaccgcttcctcgtgctttacggtatcgccgctcccgattcgcagcgcatcgccttctatcgccttcttgacgagttcttctgaggggatcaattctctagagctcgctgatcagcctcgactgtgccttctagttgccagccatctgttgtttgcccctcccccgtgccttccttgaccctggaaggtgccactcccactgtcctttcctaataaaatgaggaaattgcatcgcattgtctgagtaggtgtcattctattctggggggtggggtggggcaggacagcaagggggaggattgggaagacaatagcaggcatgctggggatgcggtgggctctatggcttctgaggcggaaagaaccagctataacttcgtatagcatacattatacgaagttat")
library(ggplot2)
library(reshape2)
library(stringr)
leukemia <- read.delim("http://pubs.broadinstitute.org/mpr/projects/Leukemia/expression_data.txt")
gene.names <- leukemia[,c(1:2)]
leukemia.clean <- leukemia[,-c(1:2)]
rownames(leukemia.clean) <- as.character(gene.names$Name)
head(leukemia.clean)
selected <- sample(1:nrow(leukemia.clean),1000)
leuk2 <- leukemia.clean[selected,]
head(leuk2)
dim(leuk2)
colnames(leuk2)
disease <- c(rep("ALL",24),rep("MLL",20),rep("AML",28))
disease
leukemia.plot <- cbind(leukemia.clean,"Disease"=disease)
leukemia.plot <- cbind(leuk2,"Disease"=disease)
leukemia.plot <- rbind(leuk2,"Disease"=disease)
head(leukemia.plot)
disease2 <- rep(NA,72)
disease2
grep("ALL",colnames(leuk2))
disease2[grep("ALL",colnames(leuk2))] <- "ALL"
disease2[grep("AML",colnames(leuk2))] <- "AML"
disease2[grep("MML",colnames(leuk2))] <- "AML"
disease2
disease2[grep("MML",colnames(leuk2))] <- "MML"
disease2[grep("MML",colnames(leuk2))] <- "MLL"
disease2
disease2[grep("ALL",colnames(leuk2))] <- "ALL"
disease2[grep("AML",colnames(leuk2))] <- "AML"
disease2 <- rep(NA,72)
disease2[grep("ALL",colnames(leuk2))] <- "ALL"
disease2[grep("AML",colnames(leuk2))] <- "AML"
disease2[grep("MML",colnames(leuk2))] <- "MLL"
disease2
disease2
disease2[grep("MLL",colnames(leuk2))] <- "MLL"
disease2
colnames(leuk2)
grep("ALL",colnames(leuk2))
disease2 <- rep(NA,72)
disease2
disease2[grep("ALL",colnames(leuk2))]
disease2[grep("ALL",colnames(leuk2))] <- "ALL"
disease2
disease2[grep("AML",colnames(leuk2))] <- "AML"
disease2
disease2[grep("MLL",colnames(leuk2))] <- "MLL"
disease2
colnames(leuk2)
stringr::str_split_fixed(colnames(leuk2),pattern = "_",2)
# technique 3
splitted <- stringr::str_split_fixed(colnames(leuk2),pattern = "_",2)
splitted[,1]
disease
#########################
head(leuk2)
selected <- sample(1:nrow(leukemia.clean),1000)
leuk2 <- leukemia.clean[selected,]
turned <- t(leuk2)
head(leuk2)
head(turned)
useful::corner(turned)
dim(turned)
turned$pts <- rownames(turned)
turned
turned <- t(leuk2)
turned2 <- cbind(turned,"pts"=rownames(turned))
dim(turned2)
turned2$pts
turned2[,"pts"]
disease
turned3 <- cbind(turned2,"disease"=disease)
dim(turned3)
turned.melt <- reshape2::melt(turned,id.vars=c("pts","disease"))
head(turned.melt)
turned.melt <- reshape2::melt(turned3,id.vars=c("pts","disease"))
head(turned.melt)
turned3 <- cbind(turned2,"disease"=disease)
turned.melt <- reshape2::melt(turned3,id.vars=c("pts","disease"))
head(turned.melt)
turned <- t(leuk2)
turned2 <- cbind(turned,"pts"=rownames(turned))
turned3 <- cbind(turned2,"disease"=disease)
turned.melt <- reshape2::melt(turned3,id.vars=c("pts","disease"))
head(turned.melt)
turned3[,"disease"]
head(turned.melt)
head(turned.melt)
tail(turned.melt)
turned <- t(leuk2)
turned2 <- cbind(turned,"pts"=rownames(turned))
turned3 <- cbind(turned2,"diseased"=disease)
turned.melt <- reshape2::melt(turned3,id.vars=c("pts","diseased"))
tail(turned.melt)
head(turned.melt)
head(turned)
useful::corner(turned)
turned.df <- as.data.frame(turned)
head(turned.df)
useful::corner(turned.df)
turned.df$disease <- stringr::str_split_fixed(rownames(turned.df),pattern = "_",2)
head(turned.df)
useful::corner(turned.df)
turned.melt <- melt(turned.df,id.vars="disease")
head(turned.melt)
useful::corner(turned.df)
turned.df$pts <- rownames(turned.df)
turned.df$disease <- stringr::str_split_fixed(rownames(turned.df),pattern = "_",2)
turned.melt <- melt(turned.df,id.vars="disease")
head(turned.melt)
turned.df <- as.data.frame(turned)
useful::corner(turned.df)
turned.df$pts <- rownames(turned.df)
turned.df$disease <- stringr::str_split_fixed(rownames(turned.df),pattern = "_",2)
turned.melt <- melt(turned.df,id.vars="disease")
head(turned.melt)
turned.df$pts
turned.melt <- melt(turned.df,id.vars=c("disease","pts"))
head(turned.melt)
ggplot(turned.df,aes(pts,value,fill=disease))+
geom_boxplot()
ggplot(turned.melt,aes(pts,value,fill=disease))+
geom_boxplot()
head(turned.melt)
ggplot(turned.melt,aes(pts,value,fill=disease))+
geom_boxplot()
turned.df <- as.data.frame(turned)
useful::corner(turned.df)
turned.df$pts <- rownames(turned.df)
turned.df$disease_col <- stringr::str_split_fixed(rownames(turned.df),pattern = "_",2)
turned.melt <- melt(turned.df,id.vars=c("disease_col","pts"))
head(turned.melt)
ggplot(turned.melt,aes(pts,value,fill=disease_col))+
geom_boxplot()
head(turned.melt)
disease_col
ggplot(turned.melt,aes(pts,value,fill=disease_col))+
geom_boxplot()
pts
ggplot(turned.melt,aes(pts,value,fill=disease_col))+
geom_boxplot()
all <- leukemia.clean[,grep(colnames(leukemia.clean),pattern = "ALL")]
colnames(all)
mll <- leukemia.clean[,grep(colnames(leukemia.clean),pattern = "MLL")]
colnames(mll)
all.mean <- apply(all,1,mean)
mll.mean <- apply(mll,1,mean)
head(all)
mean.df <- data.frame(all.mean,mll.mean,diff=log10(abs(all.mean/mll.mean)))
head(mean.df)
#########################
head(leuk2)
turned <- t(leuk2)
turned2 <- cbind(turned,"pts"=rownames(turned))
turned <- as.data.frame(t(leuk2))
turned2 <- cbind(turned,"pts"=rownames(turned))
turned3 <- cbind(turned2,"diseased"=disease)
turned.melt <- reshape2::melt(turned3,id.vars=c("pts","diseased"))
head(turned.melt)
ggplot(turned.melt,aes(pts,value,fill=disease_col))+
geom_boxplot()
ggplot(turned.melt,aes(pts,value,fill=diseased))+
geom_boxplot()
ggplot(turned.melt,aes(pts,value,fill=diseased))+
geom_boxplot()
#########################
head(leuk2)
turned.df <- as.data.frame(turned)
useful::corner(turned.df)
turned.df$pts <- rownames(turned.df)
turned.df$disease_col <- stringr::str_split_fixed(rownames(turned.df),pattern = "_",2)
turned.melt <- melt(turned.df,id.vars=c("disease_col","pts"))
head(turned.melt)
ggplot(turned.melt,aes(pts,value,fill=diseased))+
geom_boxplot()
turned.df$disease <- stringr::str_split_fixed(rownames(turned.df),pattern = "_",2)
turned.melt <- melt(turned.df,id.vars=c("disease","pts"))
head(turned.melt)
ggplot(turned.melt,aes(pts,value,fill=diseased))+
geom_boxplot()
turned.df$diseased <- stringr::str_split_fixed(rownames(turned.df),pattern = "_",2)
turned.melt <- melt(turned.df,id.vars=c("diseased","pts"))
head(turned.melt)
ggplot(turned.melt,aes(pts,value,fill=diseased))+
geom_boxplot()
#########################
head(leuk2)
turned <- as.data.frame(t(leuk2))
turned2 <- cbind(turned,"pts"=rownames(turned))
turned3 <- cbind(turned2,"diseased"=disease)
turned.melt <- reshape2::melt(turned3,id.vars=c("pts","diseased"))
head(turned.melt)
ggplot(turned.melt,aes(pts,value,fill=diseased))+
geom_boxplot()
ggplot(turned.melt,aes(pts,log10(value),fill=diseased))+
geom_boxplot()
ggplot(turned.melt,aes(pts,log10(value),fill=diseased))+
geom_boxplot()
#########################
head(leuk2)
turned <- as.data.frame(t(leuk2))
turned2 <- cbind(turned,"pts"=rownames(turned))
turned3 <- cbind(turned2,"diseased"=disease)
turned.melt <- reshape2::melt(turned3,id.vars=c("pts","diseased"))
head(turned.melt)
ggplot(turned.melt,aes(pts,value,fill=diseased))+
geom_boxplot()
leukemia[grep(leukemia$Name,pattern = "33412_at"),]
head(leuk2)
turned <- as.data.frame(t(leuk2))
head(turned)
useful::corner(turned)
turned2 <- cbind(turned,"pts"=rownames(turned))
disease
turned3 <- cbind(turned2,"diseased"=disease)
turned.melt <- reshape2::melt(turned3,id.vars=c("pts","diseased"))
head(turned.melt)
ggplot(turned.melt,aes(pts,value,fill=diseased))+
geom_boxplot()
student <- paste0("Student_",1:10)
student <- paste0("Student_",1:10)
student
set.seed(1234)
age <- round(rnorm(10,20))
age
print("Student_1 is 19 years old")
print("Student_2 is 20 years old")
1:length(student)
student
length(student)
paste(c("Apples","Bananas"),sep = "_")
paste("Apples","Bananas",sep = "_")
paste0("Apples","Banana")
print(i)
for(i in 1:20){
print(i)
}
df <- melt(leukemia[1,])
head(df)
tail(df)
df <- melt(leukemia[1,])
tail(df)
df <- melt(leukemia[2,])
tail(df)
